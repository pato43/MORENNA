from prophet import Prophet
import cmdstanpy

# Configuraci√≥n del backend
cmdstanpy.install_cmdstan(quiet=True)


import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import IsolationForest, RandomForestRegressor
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from prophet import Prophet
from sklearn.metrics import mean_squared_error

# Configuraci√≥n inicial de Streamlit
st.set_page_config(
    page_title="Optimizaci√≥n de Recursos PT",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Tema personalizado
st.markdown("""
<style>
    .css-18e3th9 { background-color: #1E1E1E; }
    .block-container { padding: 1.5rem 2rem; }
    h1, h2, h3 { color: #E0E0E0; }
    .stTabs [data-baseweb="tab"] { 
        background-color: #333333;
        color: #E0E0E0;
        border: 1px solid #444444;
        border-radius: 5px;
    }
    .stTabs [data-baseweb="tab"]:hover { 
        background-color: #444444;
    }
    .stTabs [data-baseweb="tab"][aria-selected="true"] { 
        background-color: #8B0000;
        color: #FFFFFF;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo y descripci√≥n inicial
st.title("üéõÔ∏è Dashboard: Optimizaci√≥n de Recursos para el PT")
st.subheader("Automatizaci√≥n y Eficiencia Financiera en Campa√±as")
st.markdown("""
Este dashboard est√° dise√±ado para ayudar al **Partido del Trabajo (PT)** a gestionar sus recursos de manera m√°s eficiente.  
Se emplean herramientas de **Machine Learning** para detectar anomal√≠as, predecir tendencias de gasto y agrupar categor√≠as clave.  

> **Objetivos Principales:**  
> - Reducir fugas de recursos.  
> - Identificar patrones financieros.  
> - Maximizar el impacto en las campa√±as electorales.  
""")

# Carga de datos simulados
@st.cache_data
def load_data():
    np.random.seed(42)
    categories = [
        "Salarios", "Administraci√≥n", "Gastos M√©dicos", 
        "Limpieza", "Propaganda", "Capacitaci√≥n"
    ]
    months = np.arange(1, 13)
    fluctuation = np.random.normal(scale=5000, size=500)
    data = {
        "Categor√≠a": np.random.choice(categories, 500),
        "Mes": np.random.choice(months, 500),
        "Gasto ($)": np.abs(np.random.randint(5000, 60000, 500) + fluctuation),
        "A√±o": np.random.choice([2022, 2023, 2024], 500),
    }
    return pd.DataFrame(data)

data = load_data()

# Barra lateral con filtros
with st.sidebar:
    st.header("üìå Opciones de Filtro")
    filtro_categoria = st.multiselect("Seleccionar Categor√≠as", data["Categor√≠a"].unique(), default=data["Categor√≠a"].unique())
    filtro_a√±o = st.multiselect("Seleccionar A√±os", data["A√±o"].unique(), default=data["A√±o"].unique())

# Filtrar datos
data_filtrada = data.loc[data["Categor√≠a"].isin(filtro_categoria) & data["A√±o"].isin(filtro_a√±o)].copy()

# Verificar si hay datos filtrados
if data_filtrada.empty:
    st.warning("No hay datos disponibles para los filtros seleccionados.")
else:
    # Pesta√±as principales
    tabs = st.tabs([
        "üìä An√°lisis General", 
        "üîé Transacciones Sospechosas (Isolation Forest)", 
        "üì¶ Clustering de Gastos (K-Means)", 
        "üìö Predicciones de Gasto (Prophet)", 
        "üåê An√°lisis PCA"
    ])

    # --- Pesta√±a 1: An√°lisis General ---
    with tabs[0]:
        st.header("üìä An√°lisis General de Recursos")
        st.markdown("""
        Aqu√≠ se presentan gr√°ficos b√°sicos para entender c√≥mo se distribuyen los gastos en diferentes categor√≠as y meses.
        """)

        col1, col2 = st.columns(2)

        # Gr√°fico 1: Gasto total por categor√≠a
        fig1 = px.bar(
            data_filtrada.groupby("Categor√≠a")["Gasto ($)"].sum().reset_index(),
            x="Categor√≠a", y="Gasto ($)", color="Categor√≠a",
            title="Distribuci√≥n de Gastos por Categor√≠a",
            text_auto='.2s',
            color_discrete_sequence=px.colors.qualitative.Bold
        )
        fig1.update_traces(textposition='outside', marker=dict(line=dict(color='black', width=1)))
        col1.plotly_chart(fig1, use_container_width=True)

        # Gr√°fico 2: Promedio de gasto mensual
        fig2 = px.line(
            data_filtrada.groupby("Mes")["Gasto ($)"].mean().reset_index(),
            x="Mes", y="Gasto ($)",
            title="Promedio de Gasto Mensual",
            markers=True,
            line_shape="spline",
            color_discrete_sequence=["#FF4500"]
        )
        fig2.update_traces(line=dict(width=3), marker=dict(size=10))
        col2.plotly_chart(fig2, use_container_width=True)

    # --- Pesta√±a 2: Transacciones Sospechosas (Isolation Forest) ---
    with tabs[1]:
        st.header("üîé Transacciones Sospechosas")
        st.markdown("""
        Este modelo usa **Isolation Forest**, una t√©cnica de Machine Learning no supervisado, para identificar gastos inusuales.  
        **Ejemplo:** Una transacci√≥n de $60,000 cuando el promedio de la categor√≠a es $10,000 se considera sospechosa.
        """)

        # Aplicar Isolation Forest
        iforest = IsolationForest(contamination=0.05, random_state=42)
        data_filtrada["Anomal√≠a"] = iforest.fit_predict(data_filtrada[["Gasto ($)"]])
        anomal√≠as = data_filtrada[data_filtrada["Anomal√≠a"] == -1]

        if not anomal√≠as.empty:
            fig3 = px.scatter(
                anomal√≠as, x="Mes", y="Gasto ($)", color="Categor√≠a",
                title="Transacciones Sospechosas Detectadas",
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            st.plotly_chart(fig3, use_container_width=True)
        else:
            st.success("No se encontraron anomal√≠as.")

    # --- Pesta√±a 3: Clustering de Gastos (K-Means) ---
    with tabs[2]:
        st.header("üì¶ Clustering de Gastos")
        st.markdown("""
        **K-Means** agrupa los gastos en clusters para encontrar patrones ocultos.  
        **Ejemplo:** Gastos de propaganda agrupados seg√∫n rangos bajos, medios y altos.
        """)

        kmeans = KMeans(n_clusters=3, random_state=42)
        data_filtrada["Cluster"] = kmeans.fit_predict(data_filtrada[["Gasto ($)"]])

        fig4 = px.scatter(
            data_filtrada, x="Mes", y="Gasto ($)", color="Cluster",
            title="Clustering de Gastos por Mes",
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        st.plotly_chart(fig4, use_container_width=True)

    # --- Pesta√±a 4: Predicciones de Gasto (Prophet) ---
    with tabs[3]:
        st.header("üìö Predicciones de Gasto")
        st.markdown("""
        Usamos **Prophet**, un modelo desarrollado por Facebook, para predecir tendencias de gasto.  
        **Ejemplo:** ¬øCu√°nto se gastar√° en "Propaganda" el pr√≥ximo mes?
        """)

        # Preparar datos para Prophet
        df_prophet = data_filtrada.groupby("Mes")["Gasto ($)"].sum().reset_index()
        df_prophet.columns = ["ds", "y"]

        model = Prophet()
        model.fit(df_prophet)
        future = model.make_future_dataframe(periods=12, freq='M')
        forecast = model.predict(future)

        fig5 = px.line(
            forecast, x="ds", y="yhat", title="Predicci√≥n de Gasto Mensual",
            labels={"ds": "Mes", "yhat": "Gasto ($)"},
            color_discrete_sequence=["#FF4500"]
        )
        st.plotly_chart(fig5, use_container_width=True)

    # --- Pesta√±a 5: PCA ---
    with tabs[4]:
        st.header("üåê An√°lisis PCA")
        st.markdown("""
        **PCA (An√°lisis de Componentes Principales)** reduce la complejidad de los datos manteniendo patrones clave.  
        **Ejemplo:** Visualizar categor√≠as en un espacio de 2 dimensiones.
        """)

        pca = PCA(n_components=2)
        pca_data = pca.fit_transform(data_filtrada[["Mes", "Gasto ($)"]])

        fig6 = px.scatter(
            x=pca_data[:, 0], y=pca_data[:, 1], color=data_filtrada["Categor√≠a"],
            title="Reducci√≥n de Dimensiones con PCA",
            color_discrete_sequence=px.colors.qualitative.D3
        )
        st.plotly_chart(fig6, use_container_width=True)
