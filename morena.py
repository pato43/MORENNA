import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="Demo de An치lisis de Recursos - Partido Politico",
    page_icon="游눯",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T칤tulo y descripci칩n
st.title("Demo de An치lisis de Recursos y Optimizaci칩n - Partido Politico 游눺")
st.markdown("""
Este dashboard es una **demo** interactiva para visualizar y analizar el gasto de diferentes 치reas del partido. 
Incluye an치lisis de detecci칩n de anomal칤as y sistemas de optimizaci칩n basados en ciencia de datos y machine learning.
""")

# Cargar datos (simulados)
np.random.seed(42)
data = pd.DataFrame({
    "츼rea": np.random.choice(["Administraci칩n", "Campa침as", "Log칤stica", "Publicidad", "Operaciones", "Consultor칤as"], 100),
    "Monto (millones)": np.random.uniform(1, 100, 100),
    "Mes": np.random.choice(["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio"], 100),
    "A침o": np.random.choice([2023, 2024], 100),
    "Instancia": np.random.choice(["Nacional", "Regional", "Estatal"], 100)
})

# Sidebar para filtros
st.sidebar.header("Filtros")
selected_area = st.sidebar.multiselect("Selecciona 츼rea(s):", options=data["츼rea"].unique(), default=data["츼rea"].unique())
selected_year = st.sidebar.selectbox("Selecciona A침o:", options=data["A침o"].unique())
selected_instance = st.sidebar.multiselect("Selecciona Instancia(s):", options=data["Instancia"].unique(), default=data["Instancia"].unique())

filtered_data = data[
    (data["츼rea"].isin(selected_area)) &
    (data["A침o"] == selected_year) &
    (data["Instancia"].isin(selected_instance))
]

# Gr치ficos principales
st.markdown("### An치lisis General de Gasto por 츼rea")
fig_area = px.bar(filtered_data, x="츼rea", y="Monto (millones)", color="츼rea", title="Gasto por 츼rea", barmode="group")
st.plotly_chart(fig_area, use_container_width=True)

st.markdown("### Gasto Total por Mes")
fig_month = px.line(filtered_data, x="Mes", y="Monto (millones)", color="Instancia", title="Gasto por Mes e Instancia", markers=True)
st.plotly_chart(fig_month, use_container_width=True)

# Detecci칩n de Anomal칤as
st.markdown("### Detecci칩n de Anomal칤as en los Gastos")

# Preparar datos para el modelo
scaler = StandardScaler()
scaled_data = scaler.fit_transform(filtered_data[["Monto (millones)"]])

# Isolation Forest
iso_forest = IsolationForest(contamination=0.1, random_state=42)
filtered_data["Anomal칤a"] = iso_forest.fit_predict(scaled_data)
anomalies = filtered_data[filtered_data["Anomal칤a"] == -1]

# Mostrar anomal칤as en gr치fico
fig_anomalies = px.scatter(filtered_data, x="Monto (millones)", y="츼rea", color="Anomal칤a",
                           title="Detecci칩n de Anomal칤as en Gastos",
                           color_discrete_map={-1: "red", 1: "blue"})
st.plotly_chart(fig_anomalies, use_container_width=True)

# Clusterizaci칩n (DBSCAN)
st.markdown("### Agrupaci칩n de Gastos por DBSCAN")
dbscan = DBSCAN(eps=1, min_samples=5)
filtered_data["Cluster"] = dbscan.fit_predict(scaled_data)

fig_clusters = px.scatter(filtered_data, x="Monto (millones)", y="츼rea", color="Cluster",
                           title="Clusterizaci칩n de Gastos",
                           color_continuous_scale="Viridis")
st.plotly_chart(fig_clusters, use_container_width=True)

# Dashboard de simulaci칩n
st.markdown("### Simulaci칩n y Proyecciones de Gasto")
projection_multiplier = st.slider("Ajuste de Incremento de Gasto (%)", min_value=0, max_value=100, value=10)
filtered_data["Proyecci칩n"] = filtered_data["Monto (millones)"] * (1 + projection_multiplier / 100)

fig_projection = px.area(filtered_data, x="Mes", y="Proyecci칩n", color="츼rea",
                         title=f"Proyecci칩n de Gasto con Incremento del {projection_multiplier}%")
st.plotly_chart(fig_projection, use_container_width=True)

# Descripciones adicionales
st.markdown("""
**Nota:** Esta demo utiliza datos simulados. En un entorno real, las proyecciones y modelos se ajustan con datos reales y criterios definidos 
por expertos en gesti칩n financiera y analistas de datos.
""")
